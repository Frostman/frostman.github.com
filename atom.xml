<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Frostman's blog]]></title>
  <link href="http://slukjanov.name/atom.xml" rel="self"/>
  <link href="http://slukjanov.name/"/>
  <updated>2013-03-05T16:54:39+04:00</updated>
  <id>http://slukjanov.name/</id>
  <author>
    <name><![CDATA[Sergey Lukjanov]]></name>
    <email><![CDATA[blog@slukjanov.name]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Mountain Lion and iStat Pro]]></title>
    <link href="http://slukjanov.name/blog/2012/08/08/mountain-lion-and-istat-pro/"/>
    <updated>2012-08-08T19:58:00+04:00</updated>
    <id>http://slukjanov.name/blog/2012/08/08/mountain-lion-and-istat-pro</id>
    <content type="html"><![CDATA[<p>I&#8217;m using OS X at my MBP as a main operation system and iStat Pro widget
for Dashboard to monitor temps, processes, etc.
After upgrading to OS X 10.8 Mountain Lion the processes section was not working.</p>

<p>Here is a small instruction to make processes be displayed again.</p>

<ol>
<li><p>Open iStat Pro widget directory, it is located in <code>~/Library/Widgets/iStat\ Pro.wdgt/</code>
or <code>/Library/Widgets/iStat\ Pro.wdgt/</code> (in Finder you should use <code>Show Package Contents</code> in context menu
of the specified folder to open the widget&#8217;s contents);</p></li>
<li><p>If you are using horizontal (wide) widget edit the <code>Wide.js</code> file and if
vertical (tall) - <code>Tall.js</code>;</p></li>
<li><p>Find function <code>WideSkinController.prototype.updateProcesses = function(){</code> and
replace all <code>PID|$1</code> with <code>PID| $1</code> (add space after pipe) in this section. So, you should
get something like this:</p></li>
</ol>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">WideSkinController</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">updateProcesses</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">_self</span> <span class="o">=</span> <span class="k">this</span><span class="p">;</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">exclude</span> <span class="o">=</span> <span class="s2">&quot;&quot;</span><span class="p">;</span>
</span><span class='line'>  <span class="k">if</span><span class="p">(</span><span class="nx">p</span><span class="p">.</span><span class="nx">v</span><span class="p">(</span><span class="s2">&quot;processes_excludewidgets&quot;</span><span class="p">)</span> <span class="o">==</span> <span class="s1">&#39;on&#39;</span><span class="p">)</span>
</span><span class='line'>      <span class="nx">exclude</span> <span class="o">=</span> <span class="s2">&quot; grep -v DashboardClient | &quot;</span><span class="p">;</span>
</span><span class='line'>  
</span><span class='line'>  <span class="k">if</span><span class="p">(</span><span class="nx">p</span><span class="p">.</span><span class="nx">v</span><span class="p">(</span><span class="s2">&quot;processes_sort_mode&quot;</span><span class="p">)</span> <span class="o">==</span> <span class="s1">&#39;cpu&#39;</span><span class="p">)</span>
</span><span class='line'>      <span class="nx">widget</span><span class="p">.</span><span class="nx">system</span><span class="p">(</span><span class="s1">&#39;ps -arcwwwxo &quot;pid %cpu command&quot; | egrep &quot;PID| $1&quot; | grep -v grep | &#39;</span> <span class="o">+</span> <span class="nx">exclude</span> <span class="o">+</span> <span class="s1">&#39; head -7 | tail -6 | awk \&#39;{print &quot;&lt;pid&gt;&quot;$1&quot;&lt;/pid&gt;&lt;cpu&gt;&quot;$2&quot;&lt;/cpu&gt;&lt;name&gt;&quot;$3,$4,$5&quot;&lt;/name&gt;&lt;/item&gt;&quot;}\&#39;&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">data</span><span class="p">){</span> <span class="nx">_self</span><span class="p">.</span><span class="nx">updateProcessesOut</span><span class="p">(</span><span class="nx">data</span><span class="p">);});</span>
</span><span class='line'>  <span class="k">else</span>
</span><span class='line'>      <span class="nx">widget</span><span class="p">.</span><span class="nx">system</span><span class="p">(</span><span class="s1">&#39;ps -amcwwwxo &quot;pid rss command&quot;  | egrep &quot;PID| $1&quot; | grep -v grep | &#39;</span> <span class="o">+</span> <span class="nx">exclude</span> <span class="o">+</span> <span class="s1">&#39; head -7 | tail -6 | awk \&#39;{print &quot;&lt;pid&gt;&quot;$1&quot;&lt;/pid&gt;&lt;cpu&gt;&quot;$2&quot;&lt;/cpu&gt;&lt;name&gt;&quot;$3,$4,$5&quot;&lt;/name&gt;&lt;/item&gt;&quot;}\&#39;&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">data</span><span class="p">){</span> <span class="nx">_self</span><span class="p">.</span><span class="nx">updateProcessesOut</span><span class="p">(</span><span class="nx">data</span><span class="p">);});</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<ol>
<li>Restart the iStat Pro widget and the processes list will be working again!</li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[SSH Tunneling]]></title>
    <link href="http://slukjanov.name/blog/2012/03/28/ssh-tunneling/"/>
    <updated>2012-03-28T09:01:00+04:00</updated>
    <id>http://slukjanov.name/blog/2012/03/28/ssh-tunneling</id>
    <content type="html"><![CDATA[<p>I create SSH tunnels every day and this article is a small introduction into the SSH tunneling
(also known as &#8220;port forwarding&#8221;).
A secure shell (SSH) tunnel consists of an encrypted tunnel created through a SSH protocol connection.
Users may set up SSH tunnels to transfer unencrypted traffic over a network through an encrypted channel.
SSH is typically used to log into a remote machine and execute commands, but it also supports tunneling,
forwarding TCP ports and X11 connections; it can transfer files using the associated SSH file transfer (SFTP)
or secure copy (SCP) protocols. Also tunnels provide an ability to bypass firewalls :)</p>

<p>So, let&#8217;s start. Ports can be forwarded in three ways:</p>

<ol>
<li>Local port forwarding;</li>
<li>Remote port forwarding;</li>
<li>Dynamic port forwarding (proxy).</li>
</ol>


<p>Wikipedia says that:</p>

<pre><code>Port forwarding or port mapping is a name given to the combined technique of
* translating the address and/or port number of a packet to a new destination
* possibly accepting such packet(s) in a packet filter (firewall)
* forwarding the packet according to the routing table.
</code></pre>

<h2>Tunneling with local port forwarding</h2>

<p>Let&#8217;s imagine that there are some computers with specific abilities:</p>

<ul>
<li><code>work</code> - can&#8217;t access <code>target</code> (for example, <code>target</code> is blocked by firewall or <code>target</code> can be
unaccessible from the <code>work</code>&#8217;s network)</li>
<li><code>bridge</code> (<code>gateway</code>) - accessible from <code>work</code> and can access <code>target</code> (need to have IP accessible from <code>work</code>)</li>
</ul>


<p>So, we want to access <code>target</code> throw the <code>global</code> machine.</p>

<p><code>Access from work computer to some external banned resource</code></p>

<p>To create the SSH tunnel you should execute the following command from <code>work</code> (<code>local</code>) machine:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>ssh -L [&lt;local-address-to-listen>:]&lt;local-port-to-listen>:&lt;target-host>:&lt;target-port> &lt;bridge></span></code></pre></td></tr></table></div></figure>


<p>Now the SSH client at <code>work</code> will connect to the SSHd running at <code>bridge</code> and bind <code>&lt;target-host&gt;:&lt;target-port&gt;</code>
to listen for local requests to <code>[&lt;local-address-to-listen&gt;:]&lt;local-port-to-listen&gt;</code>. At the <code>bridge</code>
end the connection to <code>&lt;target-host&gt;:&lt;target-port&gt;</code> will be created. So <code>work</code> doesnâ€™t need to know how to connect to
<code>&lt;target-host&gt;:&lt;target-port&gt;</code>, only <code>bridge</code> needs to worry about that. The channel between <code>work</code> and <code>bridge</code> will be
<strong>encrypted</strong> (SSH tunnel), but the connection between <code>bridge</code> and <code>&lt;target-host&gt;:&lt;target-port&gt;</code> will be <strong>unencrypted</strong>.</p>

<p>After executing this command, it is possible to access <code>&lt;target-host&gt;:&lt;target-port&gt;</code> by accessing
<code>[&lt;local-address-to-listen&gt;:]&lt;local-port-to-listen&gt;</code> at <code>work</code> computer. The <code>bridge</code> computer will act as a gateway
which would accept requests from <code>work</code> machine and fetch data/tunnelling it back.</p>

<h2>Tunneling with remote port forwarding  (reversed tunneling)</h2>

<p>Let&#8217;s reverse the problem.</p>

<ul>
<li><code>home</code> - can&#8217;t access <code>target</code> (for example, <code>target</code> is protected by firewall or <code>target</code> can be unacessible from the
<code>home</code>&#8217;s network)</li>
<li><code>bridge</code> (<code>gateway</code> or <code>work</code>) - accessible from <code>home</code> and can access <code>target</code> (need to have IP accessible from <code>home</code>)</li>
</ul>


<p>To create the SSH tunnel you should execute the following command from <code>bridge</code> (<code>gateway</code>/<code>work</code>) machine:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>ssh -R [&lt;home-address-to-listen>:]&lt;home-port-to-listen>:&lt;target-host>:&lt;target-port> &lt;home></span></code></pre></td></tr></table></div></figure>


<p>After executing of this command, the SSH client at <code>bridge</code> will connect to SSHd running at <code>home</code> and create the tunnel.
Then the server will bind <code>[&lt;home-address-to-listen&gt;:]&lt;home-port-to-listen&gt;</code> to listen for incoming requests which would
be routed through the created SSH tunnel between <code>home</code> and <code>gateway</code>. Now itâ€™s possible to access the &#8220;internal&#8221;
resource <code>&lt;target-host&gt;:&lt;target-port&gt;</code> by accessing <code>[&lt;home-address-to-listen&gt;:]&lt;home-port-to-listen&gt;</code> from the <code>home</code>
machine. The <code>gateway</code> will then create a connection to <code>&lt;target-host&gt;:&lt;target-port&gt;</code> and relay back the response to
<code>home</code> via the created SSH tunnel.</p>

<p>With this approach we need to create the splitted SSH tunnel for each new resource. But SSH provides us an ability to
proxy traffic to any resource using SSH tunnel and it named <code>dynamic port forwarding</code>.</p>

<h2>Dynamic port forwarding (proxy)</h2>

<p>Dynamic port forwarding provides us an ability to configure one local port for tunnelling data to all remote destinations
using the SOCKS protocol. At the client side of the SSH tunnel a SOCKS proxy would be created and any application that can
work throw SOCKS protocol can use it to access some resources that accessible only from the other host.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>ssh -D [&lt;local-address-to-listen>:]&lt;local-port-to-listen> &lt;gateway></span></code></pre></td></tr></table></div></figure>


<h2>Additional SSH flags</h2>

<p>There are several intresting <code>ssh</code> command flags:</p>

<ul>
<li><code>-v</code> - verbose output</li>
<li><code>-q</code> - quiet mode</li>
<li><code>-1</code> - forces ssh to try protocol version 1 only</li>
<li><code>-2</code> - forces ssh to try protocol version 2 only</li>
<li><code>-4</code> - forces ssh to use IPv4 addresses only</li>
<li><code>-6</code> - forces ssh to use IPv6 addresses only</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Shell improvements with Zsh]]></title>
    <link href="http://slukjanov.name/blog/2012/02/07/shell-improvements-with-zsh/"/>
    <updated>2012-02-07T00:20:00+04:00</updated>
    <id>http://slukjanov.name/blog/2012/02/07/shell-improvements-with-zsh</id>
    <content type="html"><![CDATA[<p>First of all, I want to say that the most part of materials for this article I found in the internet.
This is an agregation of usefull tips for zsh.</p>

<p>Here is my <em>.zshrc</em> file:</p>

<div><script src='https://gist.github.com/1754521.js?file='></script>
<noscript><pre><code>PROMPT='%B%F{green}%n@%m%f:%F{blue}%~%f%b%(!.#.$) '

autoload -U compinit
compinit

zmodload zsh/complist
zstyle ':completion:*' menu yes select

export CLICOLOR=1
export LSCOLORS=exfxcxdxbxegedabagacad
export LS_COLORS='di=34;40:ln=35;40:so=32;40:pi=33;40:ex=31;40:bd=34;46:cd=34;43:su=0;41:sg=0;46:tw=0;42:ow=0;43:'
zstyle ':completion:*:default' list-colors ${(s.:.)LS_COLORS}

zstyle ':completion:*' use-cache on
zstyle ':completion:*' cache-path ~/.zsh/cache

setopt AUTO_CD BSD_ECHO

_force_rehash() {
  (( CURRENT == 1 )) &amp;&amp; rehash
  return 1
}

zstyle ':completion:::::' completer _force_rehash _complete

setopt SH_WORD_SPLIT #spaces as in bash

if [ -e $HOME/.ssh/known_hosts ] ; then
  hosts=(${${${(f)&quot;$(&lt;$HOME/.ssh/known_hosts)&quot;}%%\ *}%%,*})
  zstyle ':completion:*:hosts' hosts $hosts
fi

typeset -U path cdpath fpath manpath

autoload -U predict-on
zle -N predict-on
zle -N predict-off
bindkey &quot;^X^Z&quot; predict-on # C-x C-z
bindkey &quot;^Z&quot; predict-off # C-z

autoload -U zcalc zed

export HISTFILE=~/.zsh_history
export HISTSIZE=1000
export SAVEHIST=1000
setopt APPEND_HISTORY HIST_IGNORE_ALL_DUPS HIST_IGNORE_SPACE HIST_REDUCE_BLANKS

bindkey '^[[3~' delete-char
bindkey '^E' expand-cmd-path

alias df='df -h'
alias du='du -sh'
alias grep='egrep --color=auto'
alias ll='ls -l'
</code></pre></noscript></div>


<p>There are a lot of terminal&#8217;s improvements, such as extended autocompletion and forced rehash.
I use this configuration at Ubuntu 11.10 and Mac OS X 10.7.3.
You can activate autocompletion by <em>Tab</em> button and control it by arrow keys.
It works with files, directories and hosts.</p>

<p>I don&#8217;t have much experience in configuring zsh, but feel free to ask me about something you are intersting in.</p>

<p>P.S. Some screen shots of my terminal:</p>

<p><a href="http://slukjanov.name/downloads/images/screen_shot_1.png"><img src="http://slukjanov.name/downloads/images/screen_shot_1.png"></a>
<a href="http://slukjanov.name/downloads/images/screen_shot_2.png"><img src="http://slukjanov.name/downloads/images/screen_shot_2.png"></a>
<a href="http://slukjanov.name/downloads/images/screen_shot_3.png"><img src="http://slukjanov.name/downloads/images/screen_shot_3.png"></a>
<a href="http://slukjanov.name/downloads/images/screen_shot_4.png"><img src="http://slukjanov.name/downloads/images/screen_shot_4.png"></a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[HTML5 Slides]]></title>
    <link href="http://slukjanov.name/blog/2011/09/29/html5-slides/"/>
    <updated>2011-09-29T13:19:00+04:00</updated>
    <id>http://slukjanov.name/blog/2011/09/29/html5-slides</id>
    <content type="html"><![CDATA[<p>Few days ago I encountered a problem with making presentation for techtalk. I didn&#8217;t want to use Microsoft PowerPoint
or presentations in Google Docs, because I want to publish slides in my blog. So, it had to be an html5
application and also it had to be ready to be used in browser with projector.</p>

<p>I found some interesting tool to do it. Enjoy it: <a href="https://github.com/n1k0/landslide">LandSlide</a>.</p>

<p>The sample presentation with features overview you can find <a href="http://adamzap.com/random/landslide.html#slide1">here</a>.
Use <strong>&larr;</strong> and <strong>&rarr;</strong> to browse slides.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Lock and ReentrantLock]]></title>
    <link href="http://slukjanov.name/blog/2011/09/29/lock-and-reentrantlock/"/>
    <updated>2011-09-29T09:22:00+04:00</updated>
    <id>http://slukjanov.name/blog/2011/09/29/lock-and-reentrantlock</id>
    <content type="html"><![CDATA[<p>This article is about locks in Java. Here you can read about their usage, fairness policies and performance.</p>

<p>Locks are available since <strong>Java 1.5</strong>.</p>

<h2>Interfaces</h2>

<p>First of all, lets see at interfaces.</p>

<figure class='code'><figcaption><span>java.util.concurrent.Lock </span><a href='http://download.oracle.com/javase/6/docs/api/java/util/concurrent/locks/Lock.html'>javadoc </a></figcaption> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">interface</span> <span class="nc">Lock</span> <span class="o">{</span>
</span><span class='line'>    <span class="kt">void</span> <span class="nf">lock</span><span class="o">();</span>
</span><span class='line'>    <span class="kt">void</span> <span class="nf">lockInterruptibly</span><span class="o">()</span> <span class="kd">throws</span> <span class="n">InterruptedException</span><span class="o">;</span>
</span><span class='line'>    <span class="kt">boolean</span> <span class="nf">tryLock</span><span class="o">();</span>
</span><span class='line'>    <span class="kt">boolean</span> <span class="nf">tryLock</span><span class="o">(</span><span class="kt">long</span> <span class="n">time</span><span class="o">,</span> <span class="n">TimeUnit</span> <span class="n">unit</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">InterruptedException</span><span class="o">;</span>
</span><span class='line'>    <span class="kt">void</span> <span class="nf">unlock</span><span class="o">();</span>
</span><span class='line'>    <span class="n">Condition</span> <span class="nf">newCondition</span><span class="o">();</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>As we see, it prodives opportunity of acquiring lock by different ways:</p>

<ul>
<li>if we are using <code>lock()</code> and the lock is not available the current thread will be suspended until the lock will be released;</li>
<li><code>lockInterruptible()</code> method acquires the lock until the current thread will be interrupted or lock will be released;</li>
<li><code>tryLock()</code> method acquires the lock only if it is available at the time of invocation (non-blocking, not waiting for
the lock will be released);</li>
<li>if we want to acquire the lock interruptibly with the specified waiting timeout we should use <code>tryLock(...)</code> method.</li>
</ul>


<p>There is only one method for unlocking the lock: <code>unlock()</code> and it works as it named.</p>

<p>Locks are more flexible and configurable alternative for <code>synchronized</code> methods and statements, but we should remeber that
instead of synchronized, <strong>noone</strong> will unlock the lock for us if an exception occures or return statement invokes. So,
in most cases, the following idiom should be used:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">Lock</span> <span class="n">l</span> <span class="o">=</span> <span class="o">...;</span>
</span><span class='line'><span class="n">l</span><span class="o">.</span><span class="na">lock</span><span class="o">();</span>
</span><span class='line'><span class="k">try</span> <span class="o">{</span>
</span><span class='line'>    <span class="c1">// some business logic that needs to be synchronized</span>
</span><span class='line'><span class="o">}</span> <span class="k">finally</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">l</span><span class="o">.</span><span class="na">unlock</span><span class="o">();</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>java.util.concurrent.locks.ReadWriteLock </span><a href='http://download.oracle.com/javase/6/docs/api/java/util/concurrent/locks/ReadWriteLock.html'>javadoc </a></figcaption> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">interface</span> <span class="nc">ReadWriteLock</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">Lock</span> <span class="nf">readLock</span><span class="o">();</span>
</span><span class='line'>    <span class="n">Lock</span> <span class="nf">writeLock</span><span class="o">();</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>ReadWriteLock is a pair of assotiated locks. First lock is used <strong>only</strong> for <strong>read-only</strong> operations (supports <strong>multiple</strong>
locks at the same time) and the second lock is for <strong>write</strong> operations (<strong>exclusive</strong> lock). The read lock can be acquired
only if the write lock is released. When we lock the write lock, it will wait for releasing of all read locks and then acquires.
ReadWriteLock will improve performance in case of using multiple readers and much smaller number of writers, because many of
readers will work at the same time.</p>

<h2>Implementations</h2>

<p>Java provides two implementations of these locks that we care about - <code>ReentrantLock</code> and <code>ReentrantReadWriteLock</code>.
As you see, both of them are reentrant. It means that a thread can acquire the same lock multiple times without any
issue. In fact reentrant locking increments special thread-personal counter (unlocking - decrements) and the lock will
be released only when counter reaches zero.</p>

<p>Each of lock&#8217;s implementations has additional methods that help us. Here are some of them:</p>

<ul>
<li>for <code>ReentrantLock</code> class:

<ul>
<li><code>isHeldByCurrentThread()</code> returns true iff the lock is locked by the current thread;</li>
<li><code>getHoldCount()</code> returns number (int) of locks on the lock by the current thread;</li>
<li><code>getQueueLength()</code> returns an <strong>estimate</strong> number of threads that waits to acquire the lock;</li>
<li><code>isLocked()</code> returns true if any thread holds this lock and false otherwise;</li>
</ul>
</li>
<li>for <code>ReentrantReadWriteLock</code> class:

<ul>
<li><code>isWriteLocked()</code> returns true if someone holds the write lock;</li>
<li><code>isWriteLockedByCurrentThread()</code> returns true if the lock is locked by the current thread;</li>
<li><code>getReadHoldCount()</code> returns number (int) of locks on the read lock by the current thread.</li>
</ul>
</li>
</ul>


<h2>Fairness</h2>

<p>One of the interesting features of reentrant locks is <strong>fairness</strong>. When we are creating an instance of ReentrantLock or
ReentrantReadWriteLock we can pass fair flag to the constructor. The difference of fair and non-fair locks is in granting
access policy to threads that wait in the queue to lock the lock. The fair lock grants access to the longest-waiting thread,
so it look like FIFO (First-In-First-Out). A non-fair lock does not guarantee any particular access order.
Performance of fair locks is near to <code>synchronized</code> block and non-fair locks is much faster than them.</p>

<p>By default, all locks are non-fair. Synchronized keyword and statement are non-fair, too. Fair locks have some disadvantages:</p>

<ul>
<li>performance degradation;</li>
<li>fair locks do <strong>not guarantiee</strong> fair thread ordering in real world.</li>
</ul>


<p>Micro-benchmarking in Java is not so good as we want. There are several things that can change results of tests:</p>

<ul>
<li>JVM warmup (the code becomes faster and faster while its working);</li>
<li>Class loading (all application classes must be loaded);</li>
<li>JIT compilation (JVM needs time to find hot parts of the code);</li>
<li>GC (gc can happen while benchmarking and increase the time much).</li>
</ul>


<p>Instead of this, I think that we can do some micro-benchmarks to check fair locks performance.
We have T threads, each of them will lock the lock, increment global counter, increment personal counter and unlock the lock.
Test will be ended when the global counter reaches N. So, all threads should have equal values of personal counters
(small deviation can be ignored) with fair lock and different values with non-fair lock. Lets see at average results of running
such micro-benchmark. I ran them for 50 times with <code>N=1000000</code> and <code>T=10</code> on my laptop (<code>i3 330m 2.13GHz</code>, <code>8Gb RAM</code>, <code>JDK 1.7.0</code>)
and aggregated results. &#8216;Deviation&#8217; - this is how personal counter differs from the expected value (<code>N/T</code>).</p>

<figure class='code'><figcaption><span>Fair Lock </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Deviation:
</span><span class='line'>  max: 0,3222%
</span><span class='line'>  avg: 0,0644%
</span><span class='line'>  min: 0,0351%
</span><span class='line'>
</span><span class='line'>Average takes: 10304ms</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>Non-fair Lock </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Deviation:
</span><span class='line'>  max: 20,1312%
</span><span class='line'>  avg: 2,1682%
</span><span class='line'>  min: 0,6022%
</span><span class='line'>
</span><span class='line'>Average takes: 104ms</span></code></pre></td></tr></table></div></figure>


<p>You can find sources of the test <a href="https://gist.github.com/1250500">here</a>.
The results of test match javadoc&#8217;s warning about fair locks absolutly:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>* Programs using fair locks accessed by many threads
</span><span class='line'>* may display lower overall throughput (i.e., are slower; often much
</span><span class='line'>* slower) than those using the default setting, but have smaller
</span><span class='line'>* variances in times to obtain locks and guarantee lack of
</span><span class='line'>* starvation.</span></code></pre></td></tr></table></div></figure>


<p>As we see &#8220;much slower&#8221; is up to <strong>100</strong> times slower!</p>

<p>So, we should remember about all features of locks and their configurations.
I think that we can use ReentrantLock and ReentrantReadWriteLock without any indeterminacy now.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Synchronized in Java]]></title>
    <link href="http://slukjanov.name/blog/2011/09/28/synchronized-in-java/"/>
    <updated>2011-09-28T21:01:00+04:00</updated>
    <id>http://slukjanov.name/blog/2011/09/28/synchronized-in-java</id>
    <content type="html"><![CDATA[<p>We need synchronizations, when we are writing applications that work with variables from more than one thread. The most simple
way to avoid issues of parallel accessing to variable is to use synchronized statement. In Java there are two ways to use
<code>synchronized</code>:</p>

<ul>
<li>use statement synchronized with some monitor-object to create critical section (this is also called &#8220;synchronized block&#8221;):</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>synchronized(monitorObject) {
</span><span class='line'>  // Critical section :: 
</span><span class='line'>  // this code block can be accessed 
</span><span class='line'>  // by only one thread at the time
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<ul>
<li>mark method with <code>synchronized</code> keyword and then:

<ul>
<li>if method is static, it is equal to <code>synchronized(DeclaredClass.class) { method body }</code>;</li>
<li>if method is not static, it is equal to <code>synchronized(this) { method body }</code>.</li>
</ul>
</li>
</ul>


<p>So, <code>synchronized</code> takes care about preventing locks in case of multiple read/write access to variables from more than one thread
In the latest JVM (since 1.5) <code>synchronized</code> overhead is very low in case of unused synchronizations (when only one thread
try to enter into the synchronized section at a time), but in the old JVMs <code>synchronized</code> was not optimized.</p>

<p><code>synchronized</code> keyword is not so flexible and configurable as we want sometimes, so you can read about Lock and ReadWriteLock in Java
<a href="http://slukjanov.name/blog/2011/09/29/lock-and-reentrantlock/">here</a> (my next article).</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[First Post]]></title>
    <link href="http://slukjanov.name/blog/2011/09/27/first-post/"/>
    <updated>2011-09-27T18:48:00+04:00</updated>
    <id>http://slukjanov.name/blog/2011/09/27/first-post</id>
    <content type="html"><![CDATA[<p>Welcome!</p>

<p>It is the first post in my personal blog. I have planned to write some articles about programming and technologies in it. I think that most of them will be written in english.</p>

<p>This blog is based on <a href="http://octopress.org">Octopress</a> blogging framework and hosted at Github pages.</p>

<p>You can subscribe to this blog via <a href="http://feeds.feedburner.com/slukjanov">rss</a> or <a href="http://feedburner.google.com/fb/a/mailverify?uri=slukjanov">email</a>.</p>

<p>There are some examples of embedding code into the article below:</p>

<h3>Embedding gist:</h3>

<div><script src='https://gist.github.com/1245365.js?file='></script>
<noscript><pre><code>alert(&quot;test&quot;)</code></pre></noscript></div>


<h3>Embedding inline code with pygments:</h3>

<figure class='code'><figcaption><span>Discover the power of alert </span><a href='http://slukjanov.name'>blog</a></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">alert</span><span class="p">(</span><span class="s2">&quot;test&quot;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Embedding code from a file:</h3>

<figure class='code'><figcaption><span>title (test.js)</span> <a href='http://slukjanov.name/downloads/code/test.js'>download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">alert</span><span class="p">(</span><span class="s2">&quot;test&quot;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Embedding inline code with the codeblock tag:</h3>

<figure class='code'><figcaption><span>title </span><a href='http://slukjanov.name'>blog </a></figcaption> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">alert</span><span class="p">(</span><span class="s2">&quot;test&quot;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
</feed>
