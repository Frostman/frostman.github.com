---                                                                                                                     
layout: page                                                                                                            
title: JC12 - Lecture 04. Concurrency advanced

comments: false                                                                                                         
sharing: false                                                                                                          
sidebar: collapse
footer: false                                                                                                           
---
## [Mirantis](http://www.mirantis.com) Java Course 2012 ([back](index.html))
## Lecture 04. Concurrency advanced

## План / тезисы

* JMM intro;
* happens-before relationship;
* reordering;
* examples;

слайды с лекции:

<iframe src="http://www.slideshare.net/slideshow/embed_code/15017277?startSlide=2" width="597" height="486" frameborder="0" marginwidth="0" marginheight="0" scrolling="no" style="border:1px solid #CCC;border-width:1px 1px 0;margin-bottom:5px" allowfullscreen> </iframe> <div style="margin-bottom:5px"> <strong> <a href="http://www.slideshare.net/lukjanovsv/courses-concurrency-2" title="Courses: concurrency #2" target="_blank">Courses: concurrency #2</a> </strong> from <strong><a href="http://www.slideshare.net/lukjanovsv" target="_blank">Sergey Lukjanov</a></strong> </div>

## Практической задание (сделать на занятии)
 
thread-per-client server architecture.

## Домашнее задание

*Note.* Все решения должны быть thread-safe.

### Задание #1 

Необходимо реализовать простейший чат (как клиентскую, так и серверную часть) со следующим набором комманд/возможностей:

(`<arg>` - параметры, [`<opt_arg>`] - опциональные параметры)

### `/connect <ip_address:port> <nickname> [<password>]`

Подключение к серверу с указанным адресом и портом под указанным именем с указанным паролем.
При первом подключении для конкретного имени сервер должен запомнить пароль и в будущем проверить его правильность для этого имени.
Т.е. если имя еще не занято, то происходит регистрация. Если пароль не указан, то предполагается, что он пустой. После подключения
к серверу, пользователь считается зашедшим в канал `global`, который никогда не удаляется и всегда доступен без пароля.
Если на момент выполнения команды, клиент был уже подключени, к какому либо серверу, то старое подключение обрывается.

### `/join <room_name> [<room_password>]`

Подключение к комнате с указанным именем и, возможно, используя пароль. Если такой комнаты еще не существовало, то комната создается.
Если при создании комнаты был указан пароль, то комната создается закрытой, т.е. требующей пароля для захода. Подключение к комнате означает,
что пользователю будут приходить сообщения отправленные на комнату целиком.

### `/leave <room_name>`

Покинуть комнату с указанным именем. Комнату `global` тоже можно покинуть. Если комнату покинули все пользователи и это не `global`,
то комната удаляется.

### `/msg #<room_name> Some message to the specified room "room_name".`

Отправка сообщения в указанную комнату. Такие сообщения должны отображаться у пользователей, подписанных на указанный канал в следующем виде:

```
msg from @user12345 in #global: Some message to the global room.
private msg from @user12345: Some private message.
```

### `/msg @<nickname> Some message to the specified user "nickname".`

Отправка сообщения указанному пользователю.

### `/disconnect`

Отключение от сервера.

### `/list users`

Вывод списка всех онлайн пользователей в виде:

```
+----------+-----------+---------+-------------+
| Nickname | Password? | Global? | Joined rooms|
+----------+-----------+---------+-------------+
|user12345 + Yes       + Yes     | test, abcd  |
+----------+-----------+---------+-------------+
...
```

Global? == joined to global room

### `/list rooms`

Вывод списка всех комнат в виде:

```
+-----------+-----------+---------+
| Room name | Password? | # users |
+-----------+-----------+---------+
| global    | No        | 15      |
+-----------+-----------+---------+
| test      | Yes       | 2       |
+-----------+-----------+---------+
| abcd      | No        | 10      |
+-----------+-----------+---------+
```

### `/ping`

Эта команда должна автоматически отправлять клиентом примерно раз в секунду, чтобы сервер мог определять пользователей онлайн.
Сервер должен помечать пользователей как оффлайн (удалять список комнат, к которым он подключени и тд), если от клиента не поступало
пингов в течении 5 секунд.

### Дополнительные комментарии

Историю сообщений хранить не нужно. Сообщения должны приходить только тем клиентам, которые будут их отображать, т.е. например приватные сообщения не должны приходить тем клиентам, которые не долюны их отображать и тд.

Клиент должен в произвольном виде выдавать подтверждения об успешности операций connect/disconnect.

GUI делать не нужно. Символ `\n` считать символом конца сообщения и разделителем для сообщений и комманд.